/*!
 * @name NodeJS Tuenti API 1.0.2
 * @autor yeikos
 
 * Copyright 2011 - https://github.com/yeikos/nodejs.tuenti
 * GNU General Public License
 * http://www.gnu.org/licenses/gpl-3.0.txt
 */
 
var Http = require('http'),	
	Crypto = require('crypto'),
	hostname = 'api.tuenti.com',
	pathname = '/api/',
	application_key = 'MDI3MDFmZjU4MGExNWM0YmEyYjA5MzRkODlmMjg0MTU6MC4xMzk0ODYwMCAxMjYxMDYwNjk2';

exports.gateway = function(request, callback) {

	if (typeof callback != 'function') {
	
		callback = new Function();
		
	}
	
	if (typeof request != 'object') {
	
		callback({ error: 'request' });
		
		return false;
		
	}
	
	if (request.action == 'login') {

		exports.login(request.email, request.password, function(request, response) {

			callback(response);
			
		});
	
	} else if (request.action == 'request') {
	
		var data = request.data;
		
		if (typeof data == 'string' && data.length > 0) { // try json parse
		
			try {
			
				data = JSON.parse(data);

			} catch(e) { 

				// data is literal string
				
			}
			
		} else {
		
			data = null;
			
		}

		exports.request(request.method, data, function(response) {
	
			callback(response);
			
		});
	
	} else {
	
		callback({ error: 'action' });
	
	}
	
};

exports.login = function(email, password, callback) {

	if (typeof callback != 'function') {
	
		callback = new Function();
		
	}
	
	if (typeof email != 'string' || email.length == 0) {

		callback(exports.request, { error: 'email' });
		
		return false;
		
	}
	
	if (typeof password != 'string' || password.length == 0) {

		callback(exports.request, { error: 'password' });
		
		return false;
	
	}

	exports.request('getChallenge', { type: 'login' } , function(response) {

		response = response[0];

		var data = {

			passcode: md5(response.challenge + md5(password)),
			application_key: application_key,
			timestamp: response.timestamp,
			seed: response.seed,
			email: email
			
		};

		exports.request('getSession', data, function(response) {

			response = response[0];
			
			// new instance for add session_id to request function
			
			var request = new Request(response.session_id);

			callback(request.main, response, request.session);

		});

	});

};

exports.request = function(method, data, callback) {

	var session, options, request;
	
	if (typeof callback != 'function') {
	
		callback = new Function();
		
	}
	
	if (typeof method != 'string' || method.length == 0) {
	
		callback({ error: 'method' });
		
		return false;
	
	}
	
	// if session_id exists
	
	if (data && typeof data.session_id == 'string' && data.session_id.length > 0) {
	
		session = data.session_id;
		
		delete data.session_id;

	}
	
	data = { requests: [ [ method, data ] ], version: '0.4' };

	// if session exists
	
	if (session) {
	
		data.session_id = session;
		
	}
	
	data = JSON.stringify(data);

	options = {
	
		host: hostname,
		path: pathname,
		port: 80,
		method: 'POST',
		headers: {
	
			'Content-Type': 'application/x-www-form-urlencoded',
			'Content-Length': data.length
		
		} 
		
	};
	
	request = Http.request(options, function(response) {
	
		response.setEncoding('utf8');
		
		var buffer = '';
		
		response.on('data', function(data) {
		
			buffer += data;

		});
		
		response.on('end', function() {
			
			// try parse json
			
			try {
			
				buffer = JSON.parse(buffer);
				
			} catch(e) {
			
				callback({ error: 'response' });
				
				return false;
			
			}
			
			callback(buffer); 
			
		});
	

	});

	request.end(data);

}

function Request(session) {

	var self = this;
	
	this.session = session;

	this.main = function(method, data, callback) {

		var type = typeof data;
		
		if (type != 'object') { // main(method, data, callback) || main(method, callback)
		
			if (type == 'function') {
			
				callback = data;
				
			}
			
			data = {};
			
		}
	
		data.session_id = self.session;
	
		exports.request(method, data, callback);
		
	};

}

function md5(str) {

	return Crypto.createHash('md5').update(str).digest('hex');

}